library(earlyR)
library(dplyr)
library(ggplot2)
library(deSolve)
data_regioni <- read.csv("https://github.com/pcm-dpc/COVID-19/raw/master/dati-regioni/dpc-covid19-ita-regioni.csv")
# Per controllo:
for (prov in data_regioni$denominazione_regione){
assign(paste("data_",prov, sep=""), data_regioni[data_regioni$denominazione_regione==prov,])
}
data_P.A.Bolzano <- `data_P.A. Bolzano`
data_P.A.Trento <- `data_P.A. Trento`
data_Emilia_Romagna <- `data_Emilia Romagna`
data_Friuli_Venezia_Giulia <- `data_Friuli Venezia Giulia`
data_Valle_d_Aosta <- `data_Valle d'Aosta`
# Web scraping da Wikipedia per il totale degli abitanti delle regioni
# library(rvest)
# url <- "https://it.wikipedia.org/wiki/Regioni_d%27Italia"
# population <- url %>%
#   html() %>%
#   html_nodes(xpath='//*[@id="mw-content-text"]/table') %>%
#   html_table()
# population <- population[[1]]
# Totale popolazione per regione:
n <- c(1311580, 562869, 1947131, 5801692, 4459477, 1215220,
5879082, 1550640, 10060574, 1525271, 305617, 533050,
541380, 4356406, 4029053, 1639591, 4999891, 3729641,
882015, 125666, 4905854)
for (i in 1:length(data_regioni$denominazione_regione)){
data <- data_regioni[data_regioni$denominazione_regione==levels(data_regioni$denominazione_regione)[i],]
Infected <- data$totale_attualmente_positivi[data$totale_attualmente_positivi>0]
if(data$totale_attualmente_positivi[1]==0){
Day <- (max(which(data$totale_attualmente_positivi==0))+1):length(data$data)}
else{Day <- 1:length(Infected)}
N <- n[i] # population of the region
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1))
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
t <- 1:100
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
col <- 1:3
# matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects",
#         lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects",
lwd = 2, lty = 1, col = col, log = "y")
points(Day, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"), lty = 1,
lwd = 2, col = col, inset = 0.05)
title(paste0("SIR model 2019-nCoV ", levels(data_regioni$denominazione_regione)[i], sep=""),
outer = TRUE, line = -2)
}
# R0 <- setNames(Opt_par["beta"] / Opt_par["gamma"], "R0")
#
# fit[fit$I == max(fit$I), "I", drop = FALSE] # height of pandemic
#
# date("2020-02-24") + which(fit$I == max(fit$I))
#
# l <- length(data$totale_attualmente_positivi)
#
# fit$data <- seq(from=as_date(data$data[1]), to=as_date(data$data[1])+99, "days")
# fit$real <- c(data$totale_attualmente_positivi, rep("", times=100-l))
library(earlyR)
library(dplyr)
library(ggplot2)
library(deSolve)
data_regioni <- read.csv("https://github.com/pcm-dpc/COVID-19/raw/master/dati-regioni/dpc-covid19-ita-regioni.csv")
# Per controllo:
for (prov in data_regioni$denominazione_regione){
assign(paste("data_",prov, sep=""), data_regioni[data_regioni$denominazione_regione==prov,])
}
data_P.A.Bolzano <- `data_P.A. Bolzano`
data_P.A.Trento <- `data_P.A. Trento`
data_Emilia_Romagna <- `data_Emilia Romagna`
data_Friuli_Venezia_Giulia <- `data_Friuli Venezia Giulia`
data_Valle_d_Aosta <- `data_Valle d'Aosta`
# Web scraping da Wikipedia per il totale degli abitanti delle regioni
# library(rvest)
# url <- "https://it.wikipedia.org/wiki/Regioni_d%27Italia"
# population <- url %>%
#   html() %>%
#   html_nodes(xpath='//*[@id="mw-content-text"]/table') %>%
#   html_table()
# population <- population[[1]]
# Totale popolazione per regione:
n <- c(1311580, 562869, 1947131, 5801692, 4459477, 1215220,
5879082, 1550640, 10060574, 1525271, 305617, 533050,
541380, 4356406, 4029053, 1639591, 4999891, 3729641,
882015, 125666, 4905854)
for (i in 1:length(data_regioni$denominazione_regione)){
data <- data_regioni[data_regioni$denominazione_regione==levels(data_regioni$denominazione_regione)[i],]
Infected <- data$totale_attualmente_positivi[data$totale_attualmente_positivi>0]
if(data$totale_attualmente_positivi[1]==0){
Day <- (max(which(data$totale_attualmente_positivi==0))+1):length(data$data)}
else{Day <- 1:length(Infected)}
N <- n[i] # population of the region
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1))
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
t <- 1:100
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
col <- 1:3
# matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects",
#         lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects",
lwd = 2, lty = 1, col = col, log = "y")
points(Day, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"), lty = 1,
lwd = 2, col = col, inset = 0.05)
title(paste0("SIR model 2019-nCoV ", levels(data_regioni$denominazione_regione)[i], sep=""),
outer = TRUE, line = -2)
}
